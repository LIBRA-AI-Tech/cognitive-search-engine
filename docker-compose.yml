version: "3.8"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        cp config/certs/ca/* /usr/share/public_cert/
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
          echo "Waiting for Elasticsearch availability";
          until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        if [ x${KIBANA_PASSWORD} != x ]; then
          echo "Setting kibana_system password";
          until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        fi;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/share/elasticsearch/config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 2

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - node.processors=${NODE_PROCESSORS}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
    environment:
      - node.name=es02
      - node.processors=${NODE_PROCESSORS}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
    environment:
      - node.name=es03
      - node.processors=${NODE_PROCESSORS}
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  redisai:
    image: redislabs/redisai:1.2.6-cpu-bionic
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 120
    volumes:
      - redis:/data

  setup-redis:
    build:
      context: .
      target: "redis-setup"
    depends_on:
      redisai:
        condition: service_healthy
    command: >
      bash -c '
        /usr/local/bin/modelstore;
        if [ $? -ne 0 ]; then
          echo "Storing model into RedisAI failed!";
          exit 1;
        fi;
        echo "All done!";
      '
    volumes:
      - type: bind
        source: ${MODEL_PATH}
        target: /var/local/model
        read_only: true
    environment:
      - ELASTIC_INDEX=${ELASTIC_INDEX}
      - MODEL_PATH=/var/local/model
      - MODEL_NAME=${MODEL_NAME}
      - MODEL_TAG=${MODEL_TAG}
      - REDIS_HOST=redisai
      - REDIS_PORT=6379

  api:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
      redisai:
        condition: service_healthy
      setup-redis:
        condition: service_completed_successfully
    image: "eiffel/geoss-search-service:${VERSION}"
    build:
      context: .
      args:
        VERSION: "${VERSION}"
    volumes:
      - type: bind
        source: ${MODEL_PATH}
        target: /var/local/model
        read_only: true
      - type: bind
        source: ${INIT_DATA:-/dev/null}
        target: /var/local/metadata/data/
        read_only: true
      - type: bind
        source: ${INIT_DATA_SCHEMA:-/dev/null}
        target: /var/local/metadata/schema.yml
        read_only: true
      - type: volume
        source: certs
        target: /var/local/certs
        read_only: true
    ports:
      - ${API_PORT}:8000
    environment:
      - APP_NAME=${APP_NAME}
      - ELASTIC_NODE=https://es01:9200
      - CA_CERTS=/var/local/certs/ca
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - MODEL_PATH=/var/local/model
      - QUANTIZE_MODEL=${QUANTIZE_MODEL}
      - ELASTIC_INDEX=${ELASTIC_INDEX}
      - SEARCH_SIZE=${SEARCH_SIZE}
      - INIT_DATA=/var/local/metadata/data/
      - INIT_DATA_SCHEMA=/var/local/metadata/schema.yml
      - ADMIN_KEY=${ADMIN_KEY}
      - API_KEY=${API_KEY}
      - REDIS_HOST=redisai
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redisai:6379/0
      - CELERY_RESULT_BACKEND=redis://redisai:6379/0

  worker:
    depends_on:
      - api
      - redisai
    image: "eiffel/geoss-search-service:${VERSION}"
    volumes:
      - type: bind
        source: ${MODEL_PATH}
        target: /var/local/model
        read_only: true
      - type: bind
        source: ${INIT_DATA:-/dev/null}
        target: /var/local/metadata/data/
        read_only: true
      - type: bind
        source: ${INIT_DATA_SCHEMA:-/dev/null}
        target: /var/local/metadata/schema.yml
        read_only: true
      - type: volume
        source: certs
        target: /var/local/certs
        read_only: true
    command: ["celery", "--app=tasks", "worker", "--loglevel=INFO", "--max-tasks-per-child=1"]
    environment:
      - CELERY_BROKER_URL=redis://redisai:6379/0
      - CELERY_RESULT_BACKEND=redis://redisai:6379/0
      - ELASTIC_NODE=https://es01:9200
      - CA_CERTS=/var/local/certs/ca
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_INDEX=${ELASTIC_INDEX}
      - MODEL_PATH=/var/local/model
      - QUANTIZE_MODEL=${QUANTIZE_MODEL}
      - DATA_PATH=/var/local/metadata/data
      - INIT_DATA_SCHEMA=/var/local/metadata/schema.yml

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  redis:
    driver: local
